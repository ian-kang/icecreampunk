{"version":3,"sources":["components/tweet/tweet.module.css","components/tweet/tweet.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Tweet","data","users","className","styles","container","profileBox","src","alt","picture","name","author_id","username","textBox","text","countBox","retweetBox","retweetCount","public_metrics","retweet_count","replyBox","replyCount","reply_count","likeBox","likeCount","like_count","quoteBox","quoteCount","quote_count","App","useState","tweetData","setTweetData","a","fetch","process","response","json","jsonResponse","includes","forEach","user","id","tweets","onClick","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6EACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,WAAa,0BAA0B,QAAU,uBAAuB,SAAW,wBAAwB,WAAa,0BAA0B,SAAW,wBAAwB,QAAU,uBAAuB,SAAW,wBAAwB,QAAU,uBAAuB,KAAO,oBAAoB,SAAW,wBAAwB,KAAO,oBAAoB,aAAe,4BAA4B,WAAa,0BAA0B,UAAY,yBAAyB,UAAY,2B,0LCgD9hBC,EA9CD,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACrB,OACE,sBAAKC,UAAWC,IAAOC,UAAvB,UACE,sBAAKF,UAAWC,IAAOE,WAAvB,UACE,qBACEC,IAAI,4EACJC,IAAI,cACJL,UAAWC,IAAOK,UAEpB,qBAAKN,UAAWC,IAAOM,KAAvB,SAA8BR,EAAMD,EAAKU,WAAX,OAC9B,qBAAKR,UAAWC,IAAOQ,SAAvB,oBACOV,EAAMD,EAAKU,WAAX,eAGT,qBAAKR,UAAWC,IAAOS,QAAvB,SACE,sBAAMV,UAAWC,IAAOU,KAAxB,SAA+Bb,EAAKa,SAEtC,sBAAKX,UAAWC,IAAOW,SAAvB,UACE,sBAAKZ,UAAWC,IAAOY,WAAvB,0BAEE,qBAAKb,UAAWC,IAAOa,aAAvB,SACGhB,EAAKiB,eAAeC,mBAGzB,sBAAKhB,UAAWC,IAAOgB,SAAvB,wBAEE,qBAAKjB,UAAWC,IAAOiB,WAAvB,SACGpB,EAAKiB,eAAeI,iBAGzB,sBAAKnB,UAAWC,IAAOmB,QAAvB,uBAEE,qBAAKpB,UAAWC,IAAOoB,UAAvB,SACGvB,EAAKiB,eAAeO,gBAGzB,sBAAKtB,UAAWC,IAAOsB,SAAvB,wBAEE,qBAAKvB,UAAWC,IAAOuB,WAAvB,SACG1B,EAAKiB,eAAeU,wBCDlBC,MArCf,WACE,MAAkCC,mBAAS,MAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KADa,4CAGb,gCAAAC,EAAA,sEACyBC,MAAM,GAAD,OACvBC,qCADuB,WAD9B,cACQC,EADR,gBAI6BA,EAASC,OAJtC,OAIQC,EAJR,OAMQpC,EAAQ,GACKoC,EAAaC,SAASrC,MAC9BsC,SAAQ,SAACC,GAClBvC,EAAMuC,EAAKC,IAAM,CAAEhC,KAAM+B,EAAK/B,KAAME,SAAU6B,EAAK7B,aAErDoB,EAAa,CAAEW,OAAQL,EAAarC,KAAMC,UAX5C,6CAHa,sBAiBb,OACE,sBAAKC,UAAU,MAAf,UACE,iCACE,oBAAIA,UAAU,YAAd,4BAGF,sFACA,wBAAQA,UAAU,mBAAmByC,QAxB5B,2CAwBT,uBAGA,qBAAKzC,UAAU,YAAf,SACG4B,GACCA,EAAUY,OAAOE,KAAI,SAAC5C,GAAD,OACnB,cAAC,EAAD,CAAqBA,KAAMA,EAAMC,MAAO6B,EAAU7B,OAAtCD,EAAKyC,aCtBdI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.aa96ab91.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"tweet_container__29zam\",\"profileBox\":\"tweet_profileBox__1xYtU\",\"textBox\":\"tweet_textBox__2s2_C\",\"countBox\":\"tweet_countBox__2yA0A\",\"retweetBox\":\"tweet_retweetBox__2nTTl\",\"replyBox\":\"tweet_replyBox__3v4j1\",\"likeBox\":\"tweet_likeBox__3TUty\",\"quoteBox\":\"tweet_quoteBox__1cp0x\",\"picture\":\"tweet_picture__2gz6P\",\"name\":\"tweet_name__3E8jr\",\"username\":\"tweet_username__33b6q\",\"text\":\"tweet_text__3bz_q\",\"retweetCount\":\"tweet_retweetCount__BRQaS\",\"replyCount\":\"tweet_replyCount__1v3lM\",\"likeCount\":\"tweet_likeCount__1SbFP\",\"quoteCout\":\"tweet_quoteCout__24rcD\"};","import React from \"react\";\r\nimport styles from \"./tweet.module.css\";\r\n\r\nconst Tweet = ({ data, users }) => {\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.profileBox}>\r\n        <img\r\n          src=\"https://pbs.twimg.com/profile_images/1422637130/mccigartrophy_400x400.jpg\"\r\n          alt=\"profile-pic\"\r\n          className={styles.picture}\r\n        />\r\n        <div className={styles.name}>{users[data.author_id][\"name\"]}</div>\r\n        <div className={styles.username}>\r\n          {`@${users[data.author_id][\"username\"]}`}\r\n        </div>\r\n      </div>\r\n      <div className={styles.textBox}>\r\n        <span className={styles.text}>{data.text}</span>\r\n      </div>\r\n      <div className={styles.countBox}>\r\n        <div className={styles.retweetBox}>\r\n          Retweet Count\r\n          <div className={styles.retweetCount}>\r\n            {data.public_metrics.retweet_count}\r\n          </div>\r\n        </div>\r\n        <div className={styles.replyBox}>\r\n          Reply Count\r\n          <div className={styles.replyCount}>\r\n            {data.public_metrics.reply_count}\r\n          </div>\r\n        </div>\r\n        <div className={styles.likeBox}>\r\n          Like Count\r\n          <div className={styles.likeCount}>\r\n            {data.public_metrics.like_count}\r\n          </div>\r\n        </div>\r\n        <div className={styles.quoteBox}>\r\n          Quote Count\r\n          <div className={styles.quoteCount}>\r\n            {data.public_metrics.quote_count}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Tweet;\r\n","import { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Tweet from \"./components/tweet/tweet\";\r\n\r\nfunction App() {\r\n  const [tweetData, setTweetData] = useState(null);\r\n\r\n  async function onPullData() {\r\n    const response = await fetch(\r\n      `${process.env.REACT_APP_TWEET_FETCH_URL}/tweet`\r\n    );\r\n    const jsonResponse = await response.json();\r\n\r\n    const users = {};\r\n    const authorData = jsonResponse.includes.users;\r\n    authorData.forEach((user) => {\r\n      users[user.id] = { name: user.name, username: user.username };\r\n    });\r\n    setTweetData({ tweets: jsonResponse.data, users });\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <header>\r\n        <h1 className=\"neon_text\">ICECREAMPUNK</h1>\r\n      </header>\r\n\r\n      <article>Influencers' Tweets created in the last 7 days.</article>\r\n      <button className=\"button neon_text\" onClick={onPullData}>\r\n        Pull Data\r\n      </button>\r\n      <div className=\"container\">\r\n        {tweetData &&\r\n          tweetData.tweets.map((data) => (\r\n            <Tweet key={data.id} data={data} users={tweetData.users} />\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}